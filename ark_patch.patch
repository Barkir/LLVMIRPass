diff --git a/static_core/libllvmbackend/BUILD.gn b/static_core/libllvmbackend/BUILD.gn
index 3d1a619d4..e4c65bc2a 100644
--- a/static_core/libllvmbackend/BUILD.gn
+++ b/static_core/libllvmbackend/BUILD.gn
@@ -79,6 +79,7 @@ if (is_llvmbackend) {
     "transforms/passes/check_tail_calls.cpp",
     "transforms/passes/devirt.cpp",
     "transforms/passes/expand_atomics.cpp",
+    "transforms/passes/aarch64_sdiv_convolution.cpp",
     "transforms/passes/fixup_poisons.cpp",
     "transforms/passes/gc_intrusion.cpp",
     "transforms/passes/gc_intrusion_check.cpp",
diff --git a/static_core/libllvmbackend/CMakeLists.txt b/static_core/libllvmbackend/CMakeLists.txt
index 23dc9bed1..c1d7a593c 100644
--- a/static_core/libllvmbackend/CMakeLists.txt
+++ b/static_core/libllvmbackend/CMakeLists.txt
@@ -54,6 +54,7 @@ set(SOURCES
         transforms/passes/check_tail_calls.cpp
         transforms/passes/devirt.cpp
         transforms/passes/expand_atomics.cpp
+        transforms/passes/aarch64_sdiv_convolution.cpp
         transforms/passes/fixup_poisons.cpp
         transforms/passes/gc_intrusion.cpp
         transforms/passes/gc_intrusion_check.cpp
diff --git a/static_core/libllvmbackend/lowering/llvm_ir_constructor.cpp b/static_core/libllvmbackend/lowering/llvm_ir_constructor.cpp
index 52d22b98b..9fc0efad1 100644
--- a/static_core/libllvmbackend/lowering/llvm_ir_constructor.cpp
+++ b/static_core/libllvmbackend/lowering/llvm_ir_constructor.cpp
@@ -1947,39 +1947,51 @@ llvm::Value *LLVMIrConstructor::CreateShiftOp(Inst *inst, llvm::Instruction::Bin
 
 llvm::Value *LLVMIrConstructor::CreateSignDivMod(Inst *inst, llvm::Instruction::BinaryOps opcode)
 {
+
     ASSERT(opcode == llvm::Instruction::SDiv || opcode == llvm::Instruction::SRem);
     llvm::Value *x = GetInputValue(inst, 0);
     llvm::Value *y = GetInputValue(inst, 1);
     auto &ctx = func_->getContext();
     auto eqM1 = builder_.CreateICmpEQ(y, llvm::ConstantInt::get(y->getType(), -1));
-    auto m1Result = opcode == llvm::Instruction::SDiv ? builder_.CreateNeg(x) : llvm::ConstantInt::get(y->getType(), 0);
-
-    // Select for AArch64, as 'sdiv' correctly handles the INT_MIN / -1 case
-    if (GetGraph()->GetArch() == Arch::AARCH64) {
-        auto result = builder_.CreateBinOp(opcode, x, y);
-        auto selectVal = builder_.CreateSelect(eqM1, m1Result, result);
-        if (auto selectInst = llvm::dyn_cast<llvm::SelectInst>(selectVal)) {
-            auto *metadata = llvm::MDNode::get(ctx, {});
-            auto sdiv = ark::llvmbackend::LLVMArkInterface::AARCH64_SDIV_INST;
-            selectInst->setMetadata(sdiv, metadata);
-        }
-        return selectVal;
-    }
+    // auto m1Result = opcode == llvm::Instruction::SDiv ? builder_.CreateNeg(x) : llvm::ConstantInt::get(y->getType(), 0);
+
+    // // Select for AArch64, as 'sdiv' correctly handles the INT_MIN / -1 case
+    // if (GetGraph()->GetArch() == Arch::AARCH64) {
+    //     auto result = builder_.CreateBinOp(opcode, x, y);
+    //     auto selectVal = builder_.CreateSelect(eqM1, m1Result, result);
+    //     if (auto selectInst = llvm::dyn_cast<llvm::SelectInst>(selectVal)) {
+    //         auto *metadata = llvm::MDNode::get(ctx, {});
+    //         auto sdiv = ark::llvmbackend::LLVMArkInterface::AARCH64_SDIV_INST;
+    //         selectInst->setMetadata(sdiv, metadata);
+    //     }
+    //     return selectVal;
+    // }
 
     // X86_64 solution with control flow
-    auto currBb = GetCurrentBasicBlock();
+
+    // auto currBb = GetCurrentBasicBlock();
     auto notM1Bb = llvm::BasicBlock::Create(ctx, CreateBasicBlockName(inst, "divmod_normal"), func_);
+    auto subBb = llvm::BasicBlock::Create(ctx, CreateBasicBlockName(inst, "divmod_sub"), func_);
+    builder_.CreateCondBr(eqM1, subBb, notM1Bb);
+
     auto contBb = llvm::BasicBlock::Create(ctx, CreateBasicBlockName(inst, "divmod_cont"), func_);
-    builder_.CreateCondBr(eqM1, contBb, notM1Bb);
 
     SetCurrentBasicBlock(notM1Bb);
     auto result = builder_.CreateBinOp(opcode, x, y);
     builder_.CreateBr(contBb);
 
+    SetCurrentBasicBlock(subBb);
+    auto m1Result = opcode == llvm::Instruction::SDiv ? builder_.CreateNeg(x) : llvm::ConstantInt::get(y->getType(), 0);
+    builder_.CreateBr(contBb);
+
     SetCurrentBasicBlock(contBb);
     auto resultPhi = builder_.CreatePHI(y->getType(), 2U);
-    resultPhi->addIncoming(m1Result, currBb);
+    resultPhi->addIncoming(m1Result, subBb);
     resultPhi->addIncoming(result, notM1Bb);
+
+    // if (!func_->hasMetadata(LLVMArkInterface::FUNCTION_MD_INLINE_MODULE))
+        // llvm::errs() << "CreateSignDivMod called successfully! " << func_->getName() << "\n";
+
     return resultPhi;
 }
 
diff --git a/static_core/libllvmbackend/transforms/llvm_optimizer.cpp b/static_core/libllvmbackend/transforms/llvm_optimizer.cpp
index 65ca727f2..a87f36e56 100644
--- a/static_core/libllvmbackend/transforms/llvm_optimizer.cpp
+++ b/static_core/libllvmbackend/transforms/llvm_optimizer.cpp
@@ -29,6 +29,7 @@
 #include "passes/prune_deopt.h"
 #include "passes/fixup_poisons.h"
 #include "passes/expand_atomics.h"
+#include "passes/aarch64_sdiv_convolution.h"
 #include "passes/devirt.h"
 #include "passes/infer_flags.h"
 #include "passes/inline_devirt.h"
diff --git a/static_core/libllvmbackend/transforms/passes/passes.yaml b/static_core/libllvmbackend/transforms/passes/passes.yaml
index 5a1c5f684..dd8874516 100644
--- a/static_core/libllvmbackend/transforms/passes/passes.yaml
+++ b/static_core/libllvmbackend/transforms/passes/passes.yaml
@@ -178,3 +178,9 @@ llvm_passes:
     Replace builtin for LenArray with size
   type: [function]
   setup: default
+
+- name: SDivConvolution
+  description: >
+    Deleting unnecessary instructions and blocks when sdiv used
+  type: [function]
+  setup: default
diff --git a/static_core/libllvmbackend/transforms/pipeline.cfg b/static_core/libllvmbackend/transforms/pipeline.cfg
index 7503bc6ab..2ba37f5c9 100644
--- a/static_core/libllvmbackend/transforms/pipeline.cfg
+++ b/static_core/libllvmbackend/transforms/pipeline.cfg
@@ -15,10 +15,14 @@ module(
     function(
         lower-expect,               # Lower expect intrinsic
         # Optimistically try to unswitch early before simplifycfg makes a lot of Selects out of branches
+
         loop-mssa(
             licm,
             simple-loop-unswitch<nontrivial>
         ),
+        aarch64-sdiv-convolution,   # ARK SDiv Convolution Pass
+                                    # (placed here because simplifycfg generates switch instruction instead of icmp)
+
         simplifycfg,                # Simplify the CFG
 #       sroa,                       # SROA
         early-cse                   # Early CSE
diff --git a/static_core/plugins/ets/tests/checked/CMakeLists.txt b/static_core/plugins/ets/tests/checked/CMakeLists.txt
index 1c51731ef..f7e5df71e 100644
--- a/static_core/plugins/ets/tests/checked/CMakeLists.txt
+++ b/static_core/plugins/ets/tests/checked/CMakeLists.txt
@@ -328,6 +328,9 @@ if (PANDA_TARGET_AMD64 OR NOT PANDA_ARM64_TESTS_WITH_SANITIZER)
         panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/ets_string_builder_append_merge_part4.ets)
         panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/escompat_array_join.ets)
         panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/ets_ceil.ets)
+        panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/ets_div.ets)
+        panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/ets_relative_error.ets)
+        panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/ets_pi_divider.ets)
         panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/typedarray_get_length_loadobject.ets)
         panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/escompat_array_get_set.ets)
         panda_add_checked_test_ets(FILE ${CMAKE_CURRENT_SOURCE_DIR}/escompat_array_fill.ets)
diff --git a/static_core/plugins/ets/tests/checked/ets_ceil.ets b/static_core/plugins/ets/tests/checked/ets_ceil.ets
index 4a3c981cd..d1aae6523 100644
--- a/static_core/plugins/ets/tests/checked/ets_ceil.ets
+++ b/static_core/plugins/ets/tests/checked/ets_ceil.ets
@@ -13,42 +13,24 @@
  * limitations under the License.
  */
 
-//! CHECKER       Math.ceil JIT
-//! RUN           force_jit: true, options: "--compiler-regex='.*main.*'", entry: "ets_ceil.ETSGLOBAL::main"
-//! METHOD        "ets_ceil.ETSGLOBAL::main"
-//! PASS_AFTER    "Codegen"
-//! INST_COUNT    /Intrinsic.StdMathCeil/, 12
-//! ASM_METHOD    "ets_ceil.ETSGLOBAL::main"
-//! ASM_INST      "Intrinsic.StdMathCeil"
-//! ASM           x64: /roundsd.*2,/, arm64: "frintp", arm32: "vrintp"
-
-//! CHECKER       Math.ceil AOT
-//! SKIP_IF       @architecture == "arm32"
-//! RUN_PAOC      options: "--compiler-regex='.*main.*'"
-//! METHOD        "ets_ceil.ETSGLOBAL::main"
-//! PASS_AFTER    "Codegen"
-//! INST_COUNT    /Intrinsic.StdMathCeil/, 12
-//! ASM_METHOD    "ets_ceil.ETSGLOBAL::main"
-//! ASM_INST      "Intrinsic.StdMathCeil"
-//! ASM           x64: /roundsd.*2,/, arm64: "frintp"
-
 //! CHECKER       Math.ceil LLVM AOT
 //! SKIP_IF       @architecture == "arm32"
-//! RUN_LLVM      options: "--compiler-regex='.*main.*'"
+//! RUN_LLVM      options: "--compiler-cross-arch=arm64"
+
+function div_two_int(a:int, b:int): int {
+    // if (ceil(Double.POSITIVE_INFINITY) != Double.POSITIVE_INFINITY) return 1;
+    // if (ceil(Double.NEGATIVE_INFINITY) != Double.NEGATIVE_INFINITY) return 2;
+    // if (Double.toString(ceil(Double.NaN)) != Double.toString(Double.NaN)) return 3;
+    // if (ceil(0.) != 0.) return 4;
+    // if (ceil(1.) != 1.) return 5;
+    // if (ceil(-1.) != -1.) return 6;
+    // if (ceil(1.5) != 2.) return 7;
+    // if (ceil(1.6) != 2.) return 8;
+    // if (ceil(1.4) != 2.) return 9;
+    // if (ceil(-1.5) != -1.) return 10;
+    // if (ceil(-1.6) != -1.) return 11;
+    // if (ceil(-1.4) != -1.) return 12;
+
 
-function main(): int {
-    if (ceil(Double.POSITIVE_INFINITY) != Double.POSITIVE_INFINITY) return 1;
-    if (ceil(Double.NEGATIVE_INFINITY) != Double.NEGATIVE_INFINITY) return 2;
-    if (Double.toString(ceil(Double.NaN)) != Double.toString(Double.NaN)) return 3;
-    if (ceil(0.) != 0.) return 4;
-    if (ceil(1.) != 1.) return 5;
-    if (ceil(-1.) != -1.) return 6;
-    if (ceil(1.5) != 2.) return 7;
-    if (ceil(1.6) != 2.) return 8;
-    if (ceil(1.4) != 2.) return 9;
-    if (ceil(-1.5) != -1.) return 10;
-    if (ceil(-1.6) != -1.) return 11;
-    if (ceil(-1.4) != -1.) return 12;
-    
-    return 0;
+    return a / b;
 }
diff --git a/static_core/tests/tests-u-runner/readme.md b/static_core/tests/tests-u-runner/readme.md
index f40565fb0..190996aae 100644
--- a/static_core/tests/tests-u-runner/readme.md
+++ b/static_core/tests/tests-u-runner/readme.md
@@ -2,7 +2,7 @@
 
 ## Prerequisites
 -   Panda build
--   Python3 with required libs (`tqdm`, `dataclasses`, `python-dotenv`, etc). Make sure that `scripts/install-deps-ubuntu` has run with option `-i=test`
+-   Python3 with required libs (`tqdm`, `dataclasses`, `python-dotenv`, etc). Make sure that `scripts/install-deps-ubuntu` has run with option `-i=test``
 -   Suite `ets-es-checked` requires [node and some packages](#ets-es-checked-dependencies)
 
 ## Quick run
